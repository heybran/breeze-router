{"version":3,"file":"BreezeRouter.min.js","sources":["../src/core/utils.js","../src/index.js"],"sourcesContent":["// @ts-check\n\nexport const isFunction = (fn) => {\n  return fn.constructor.name.toLowerCase() === \"function\";\n}\n\nexport const isAsyncFunction = (fn) => {\n  return fn.constructor.name.toLowerCase() === \"asyncfunction\"; \n}\n\n/**\n * Remove trailing slash of a give url\n * @param {string} url\n * @returns {string}\n */\nexport const removeTrailingSlash = (url) => {\n  if (url.endsWith('/')) {\n    url = url.replace(/\\/$/, '');\n  }\n  \n  return url;\n}","// @ts-check\nimport {\n  isFunction,\n  isAsyncFunction,\n  removeTrailingSlash,  \n} from \"./core/utils.js\";\n\n/**\n * Class representing a router.\n */\nexport default class BreezeRouter {\n  /**\n   * Creates a new BreezeRouter instance.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * Object containing all registered routes.\n     * @type {import('./types.js').Route}\n     * @private\n     */\n    this._routes = {};\n\n    /**\n     * The previous route that was navigated to\n     * @type {import('./types.js').Route}\n     * @private\n     */\n    this._previousRoute = {};\n\n    /**\n     * Flag indicating whether this is the first initial page load.\n     * @type {boolean}\n     * @private\n     */\n    this._isInitialLoad = false;\n\n    // Bind event listeners\n    window.addEventListener('popstate', this._onChanged.bind(this));\n    document.body.addEventListener('click', this._handleClick.bind(this));\n  }\n\n  /**\n   * Initializes the router by triggering the initial navigation event.\n   * @returns {void}\n   */\n  init() {\n    this._onChanged();\n  }\n\n  /**\n   * Adds a new route to the router.\n   * @param {string} route - The route path to add.\n   * @param {Function} handler - The async function to handle the route\n   * @returns {BreezeRouter|void} The BreezeRouter instance.\n   */\n  add(route, handler) {\n    route = route.trim();\n    if (route !== \"/\") {\n      route = removeTrailingSlash(route.trim());\n    }    \n\n    if (this._routes[route]) {\n      return console.warn(`Route already exists: ${route}`);\n    }\n\n    if (typeof handler !== 'function') {\n      return console.error(`handler on route '${route}' is not a function.`);\n    }\n\n    this._routes[route] = {\n      path: route,\n      handler\n    };\n\n    return this;\n  }\n\n  /**\n   * Navigates to the specified URL.\n   * @param {string} url - The URL to navigate to\n   * @returns {void}\n   */\n  navigateTo(url) {\n    window.history.pushState({url}, '', url);\n    this._onChanged();\n  }\n\n  async _onChanged() {\n    const path = window.location.pathname;\n    const { route, params } = this._matchUrlToRoute(path);\n\n    if (!route) {\n      return;\n    }\n\n    if (isFunction(route.handler)) {\n      route.handler({ route, params });\n    } \n\n    if (isAsyncFunction(route.handler)) {\n      await route.handler({ route, params });\n    }\n  }\n\n  /**\n   *\n   * @param {string} url - Current url users visite or nagivate to.\n   * @returns {import('./types.js').MatchedRoute}\n   */\n  _matchUrlToRoute(url) {\n    /** @type {import('./types.js').RouteParams} */\n    const params = {};\n\n    if (url !== '/') {\n      url = removeTrailingSlash(url);\n    }\n\n    const matchedRoute = Object.keys(this._routes).find((route) => {\n      if (url.split('/').length !== route.split('/').length) {\n        return false;\n      }\n\n      let routeSegments = route.split('/').slice(1);\n      let urlSegments = url.split('/').slice(1);\n\n      // If each segment in the url matches the corresponding segment in the route path,\n      // or the route path segment starts with a ':' then the route is matched.\n      const match = routeSegments.every((segment, i) => {\n        return segment === urlSegments[i] || segment.startsWith(':');\n      });\n\n      if (!match) {\n        return false;\n      }\n\n      // If the route matches the URL, pull out any params from the URL.\n      routeSegments.forEach((segment, i) => {\n        if (segment.startsWith(':')) {\n          const propName = segment.slice(1);\n          params[propName] = decodeURIComponent(urlSegments[i]);\n        }\n      });\n\n      return true;\n    });\n\n    return { route: this._routes[matchedRoute], params };\n  }\n\n  _handleClick(event) {\n  }\n} "],"names":["removeTrailingSlash","url","endsWith","replace","BreezeRouter","constructor","this","_routes","_previousRoute","_isInitialLoad","window","addEventListener","_onChanged","bind","document","body","_handleClick","init","add","route","handler","trim","console","warn","error","path","navigateTo","history","pushState","async","location","pathname","params","_matchUrlToRoute","name","toLowerCase","fn","isAsyncFunction","matchedRoute","Object","keys","find","split","length","routeSegments","slice","urlSegments","every","segment","i","startsWith","forEach","propName","decodeURIComponent","event"],"mappings":"AAEO,MAaMA,EAAuBC,IAC9BA,EAAIC,SAAS,OACfD,EAAMA,EAAIE,QAAQ,MAAO,KAGpBF,GCVM,MAAMG,EAKnBC,cAMEC,KAAKC,QAAU,GAOfD,KAAKE,eAAiB,GAOtBF,KAAKG,gBAAiB,EAGtBC,OAAOC,iBAAiB,WAAYL,KAAKM,WAAWC,KAAKP,OACzDQ,SAASC,KAAKJ,iBAAiB,QAASL,KAAKU,aAAaH,KAAKP,MAChE,CAMDW,OACEX,KAAKM,YACN,CAQDM,IAAIC,EAAOC,GAMT,MAJc,OADdD,EAAQA,EAAME,UAEZF,EAAQnB,EAAoBmB,EAAME,SAGhCf,KAAKC,QAAQY,GACRG,QAAQC,KAAK,yBAAyBJ,KAGxB,mBAAZC,EACFE,QAAQE,MAAM,qBAAqBL,0BAG5Cb,KAAKC,QAAQY,GAAS,CACpBM,KAAMN,EACNC,WAGKd,KACR,CAODoB,WAAWzB,GACTS,OAAOiB,QAAQC,UAAU,CAAC3B,OAAM,GAAIA,GACpCK,KAAKM,YACN,CAEDiB,mBACE,MAAMJ,EAAOf,OAAOoB,SAASC,UACvBZ,MAAEA,EAAKa,OAAEA,GAAW1B,KAAK2B,iBAAiBR,GAE3CN,IDzFsC,aC6F5BA,EAAMC,QD7Fbf,YAAY6B,KAAKC,eC8FvBhB,EAAMC,QAAQ,CAAED,QAAOa,WD3FE,CAACI,GACe,kBAAtCA,EAAG/B,YAAY6B,KAAKC,cC6FrBE,CAAgBlB,EAAMC,gBAClBD,EAAMC,QAAQ,CAAED,QAAOa,WAEhC,CAODC,iBAAiBhC,GAEf,MAAM+B,EAAS,CAAA,EAEH,MAAR/B,IACFA,EAAMD,EAAoBC,IAG5B,MAAMqC,EAAeC,OAAOC,KAAKlC,KAAKC,SAASkC,MAAMtB,IACnD,GAAIlB,EAAIyC,MAAM,KAAKC,SAAWxB,EAAMuB,MAAM,KAAKC,OAC7C,OAAO,EAGT,IAAIC,EAAgBzB,EAAMuB,MAAM,KAAKG,MAAM,GACvCC,EAAc7C,EAAIyC,MAAM,KAAKG,MAAM,GAQvC,QAJcD,EAAcG,OAAM,CAACC,EAASC,IACnCD,IAAYF,EAAYG,IAAMD,EAAQE,WAAW,SAQ1DN,EAAcO,SAAQ,CAACH,EAASC,KAC9B,GAAID,EAAQE,WAAW,KAAM,CAC3B,MAAME,EAAWJ,EAAQH,MAAM,GAC/Bb,EAAOoB,GAAYC,mBAAmBP,EAAYG,GACnD,MAGI,EAAI,IAGb,MAAO,CAAE9B,MAAOb,KAAKC,QAAQ+B,GAAeN,SAC7C,CAEDhB,aAAasC,GACZ"}