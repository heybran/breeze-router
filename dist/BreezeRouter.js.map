{"version":3,"file":"BreezeRouter.js","sources":["../src/core/utils.js","../src/index.js"],"sourcesContent":["// @ts-check\n\nexport const isFunction = (fn) => {\n  return fn.constructor.name.toLowerCase() === \"function\";\n}\n\nexport const isAsyncFunction = (fn) => {\n  return fn.constructor.name.toLowerCase() === \"asyncfunction\"; \n}\n\n/**\n * Remove trailing slash of a give url\n * @param {string} url\n * @returns {string}\n */\nexport const removeTrailingSlash = (url) => {\n  if (url.endsWith('/')) {\n    url = url.replace(/\\/$/, '');\n  }\n  \n  return url;\n}","// @ts-check\nimport {\n  isFunction,\n  isAsyncFunction,\n  removeTrailingSlash,  \n} from \"./core/utils.js\";\n\n/**\n * Class representing a router.\n */\nexport default class BreezeRouter {\n  /**\n   * Creates a new BreezeRouter instance.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * Object containing all registered routes.\n     * @type {import('./types.js').Route}\n     * @private\n     */\n    this._routes = {};\n\n    /**\n     * The previous route that was navigated to\n     * @type {import('./types.js').Route}\n     * @private\n     */\n    this._previousRoute = {};\n\n    /**\n     * Flag indicating whether this is the first initial page load.\n     * @type {boolean}\n     * @private\n     */\n    this._isInitialLoad = false;\n\n    // Bind event listeners\n    window.addEventListener('popstate', this._onChanged.bind(this));\n    document.body.addEventListener('click', this._handleClick.bind(this));\n  }\n\n  /**\n   * Initializes the router by triggering the initial navigation event.\n   * @returns {void}\n   */\n  init() {\n    this._onChanged();\n  }\n\n  /**\n   * Adds a new route to the router.\n   * @param {string} route - The route path to add.\n   * @param {Function} handler - The async function to handle the route\n   * @returns {BreezeRouter|void} The BreezeRouter instance.\n   */\n  add(route, handler) {\n    route = route.trim();\n    if (route !== \"/\") {\n      route = removeTrailingSlash(route.trim());\n    }    \n\n    if (this._routes[route]) {\n      return console.warn(`Route already exists: ${route}`);\n    }\n\n    if (typeof handler !== 'function') {\n      return console.error(`handler on route '${route}' is not a function.`);\n    }\n\n    this._routes[route] = {\n      path: route,\n      handler\n    };\n\n    return this;\n  }\n\n  /**\n   * Navigates to the specified URL.\n   * @param {string} url - The URL to navigate to\n   * @returns {void}\n   */\n  navigateTo(url) {\n    window.history.pushState({url}, '', url);\n    this._onChanged();\n  }\n\n  async _onChanged() {\n    const path = window.location.pathname;\n    const { route, params } = this._matchUrlToRoute(path);\n\n    if (!route) {\n      return;\n    }\n\n    if (isFunction(route.handler)) {\n      route.handler({ route, params });\n    } \n\n    if (isAsyncFunction(route.handler)) {\n      await route.handler({ route, params });\n    }\n  }\n\n  /**\n   *\n   * @param {string} url - Current url users visite or nagivate to.\n   * @returns {import('./types.js').MatchedRoute}\n   */\n  _matchUrlToRoute(url) {\n    /** @type {import('./types.js').RouteParams} */\n    const params = {};\n\n    if (url !== '/') {\n      url = removeTrailingSlash(url);\n    }\n\n    const matchedRoute = Object.keys(this._routes).find((route) => {\n      if (url.split('/').length !== route.split('/').length) {\n        return false;\n      }\n\n      let routeSegments = route.split('/').slice(1);\n      let urlSegments = url.split('/').slice(1);\n\n      // If each segment in the url matches the corresponding segment in the route path,\n      // or the route path segment starts with a ':' then the route is matched.\n      const match = routeSegments.every((segment, i) => {\n        return segment === urlSegments[i] || segment.startsWith(':');\n      });\n\n      if (!match) {\n        return false;\n      }\n\n      // If the route matches the URL, pull out any params from the URL.\n      routeSegments.forEach((segment, i) => {\n        if (segment.startsWith(':')) {\n          const propName = segment.slice(1);\n          params[propName] = decodeURIComponent(urlSegments[i]);\n        }\n      });\n\n      return true;\n    });\n\n    return { route: this._routes[matchedRoute], params };\n  }\n\n  _handleClick(event) {\n  }\n} "],"names":[],"mappings":"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"}